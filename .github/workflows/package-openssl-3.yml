name: build with openssl 3.0

on:
  push:
    branches:
     - 'main'
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '30 * * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout project
      uses: actions/checkout@v2

    - name: Clone nginx
      id: check_nginx
      run: |
        git clone https://github.com/nginx/nginx.git
        cd nginx
        test -f .hgtags && cat .hgtags |tail -n 1 |awk '{print $2}'
        VER=$(test -f .hgtags && cat .hgtags |tail -n 1 |awk '{print $2}')
        git checkout $VER
        echo "::set-output name=VER::$(echo $VER)"
        echo "::set-output name=V::$(echo $VER| cut -c9-)"
        echo "[DEBUG] steps.check_nginx.outputs.VER" $VER

    - name: Clone Openssl
      id: check_openssl
      run: |
        git clone https://github.com/openssl/openssl.git
        cd openssl
        git log --simplify-by-decoration --pretty="format:%ct %D" --tags \
          | grep openssl-3. \
          | sort -n -k 1 -t " " -r \
          | head -n 1 \
          | awk '{print $3}'
        VER=$(git log --simplify-by-decoration --pretty="format:%ct %D" --tags \
          | grep openssl-3. \
          | sort -n -k 1 -t " " -r \
          | head -n 1 \
          | awk '{print $3}')
        git checkout $VER
        echo "::set-output name=VER::$(echo $VER)"
        echo "[DEBUG] steps.check_openssl.outputs.VER" $VER

    - name: Check Release
      id: check_release
      run: |
        git clone https://github.com/aericpp/nginx-proxy.git
        cd nginx-proxy
        TAG_NAME=$(echo "v"${{steps.check_nginx.outputs.V}}"-"${{steps.check_openssl.outputs.VER}})
        TAG_EXIST=$(git tag -l ${TAG_NAME})
        echo "[DEBUG] TAG_NAME" $TAG_NAME
        echo "[DEBUG] TAG_EXIST" $TAG_EXIST
        echo "::set-output name=FLAG::1"
        echo "::set-output name=TAG_NAME::$(echo $TAG_NAME)"
        if [ "$TAG_NAME" == "$TAG_EXIST" ];then
          echo "::set-output name=FLAG::0"
        fi

    - name: Clone ngx_http_proxy_connect_module
      run: |
        git clone https://github.com/chobits/ngx_http_proxy_connect_module.git        
        echo "[DEBUG] steps.check_nginx.outputs.VER" ${{ steps.check_nginx.outputs.VER }}
        echo "[DEBUG] steps.check_openssl.outputs.VER" ${{ steps.check_openssl.outputs.VER }}
        echo "[DEBUG] steps.check_release.outputs.FLAG" ${{ steps.check_release.outputs.FLAG }}
        echo "[DEBUG] steps.check_release.outputs.TAG_NAME" ${{ steps.check_release.outputs.TAG_NAME }}
        echo "[DEBUG] github.event_name" ${{ github.event_name }}

    - name: Compile nginx
      if: |
        ${{
          steps.check_release.outputs.FLAG == 1 ||
            github.event_name == 'push'
        }}
      run: |
        cur_path=`pwd`
        cd nginx
        mv auto/configure configure
        patch -p1 <../ngx_http_proxy_connect_module/patch/proxy_connect_rewrite_102101.patch
        ./configure \
          --prefix=/usr/share/nginx \
          --sbin-path=/usr/sbin/nginx \
          --conf-path=/etc/nginx/nginx.conf \
          --http-log-path=/var/log/nginx/access.log \
          --error-log-path=/var/log/nginx/error.log \
          --lock-path=/var/lock/nginx.lock \
          --pid-path=/run/nginx.pid \
          --modules-path=/usr/lib/nginx/modules \
          --http-client-body-temp-path=/var/lib/nginx/body \
          --http-proxy-temp-path=/var/lib/nginx/proxy \
          --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
          --without-mail_pop3_module \
          --without-mail_imap_module \
          --without-mail_smtp_module \
          --without-http_memcached_module \
          --without-http_uwsgi_module \
          --without-http_scgi_module \
          --with-http_gzip_static_module \
          --with-http_ssl_module \
          --with-http_stub_status_module \
          --with-http_v2_module \
          --with-openssl="${cur_path}/openssl" \
          --with-stream \
          --with-stream_ssl_module \
          --with-stream_ssl_preread_module \
          --with-stream_realip_module \
          --add-module="${cur_path}/ngx_http_proxy_connect_module"
        make
        test -d ../nginx_debian/usr/sbin/ || mkdir -p ../nginx_debian/usr/sbin/
        cp objs/nginx ../nginx_debian/usr/sbin/nginx

    - name: Make DEB package
      if: |
        ${{
          steps.check_release.outputs.FLAG == 1 ||
            github.event_name == 'push' 
        }}
      run: |
        pwd
        NG_PKG_SIZE=`du -sk nginx_debian|awk '{print $1}'`
        NG_PKG_VERSION=${{ steps.check_nginx.outputs.V }}
        test -d "nginx_debian/DEBIAN" || mkdir -p "nginx_debian/DEBIAN" 
        sed -e "s|%%SIZE%%|${NG_PKG_SIZE}|" -e "s|%%VERSION%%|${NG_PKG_VERSION}|" < control_tmpl > nginx_debian/DEBIAN/control
        test -d "nginx_debian/var/lib/nginx" || mkdir -p "nginx_debian/var/lib/nginx"        
        test -d "nginx_debian/var/log/nginx" || mkdir -p "nginx_debian/var/log/nginx"
        test -d "nginx_debian/var/www/html" || mkdir -p "nginx_debian/var/www/html"
        test -d "nginx_debian/etc/nginx/modules-available" || mkdir -p "nginx_debian/etc/nginx/modules-available"
        test -d "nginx_debian/etc/nginx/modules-enabled" || mkdir -p "nginx_debian/etc/nginx/modules-enabled"
        test -d "nginx_debian/etc/nginx/conf.d" || mkdir -p "nginx_debian/etc/nginx/conf.d"
        test -d "nginx_debian/etc/nginx/sites-enabled" || mkdir -p "nginx_debian/etc/nginx/sites-enabled"
        dpkg -b nginx_debian nginx_proxy.deb

    - name: Upload artifact
      if: |
        ${{
          steps.check_release.outputs.FLAG == 1 ||
            github.event_name == 'push'
        }}
      uses: actions/upload-artifact@master
      with:
        name: nginx
        path: |
          nginx_proxy.deb

    - name: Release
      if: ${{ steps.check_release.outputs.FLAG == 1 }}
      uses: djnicholson/release-action@v2.11
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        release-name: ${{ format('nginx_{0}', steps.check_release.outputs.TAG_NAME) }}
        tag-name: ${{ format('{0}', steps.check_release.outputs.TAG_NAME) }}
        asset-name: ${{ format('nginx_{0}_amd64.deb', steps.check_release.outputs.TAG_NAME) }}
        file: 'nginx_proxy.deb'
